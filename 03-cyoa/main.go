package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"html/template"
	"net/http"
	"os"
)

// generated by https://mholt.github.io/json-to-go
// Will used in template parsing
type Story map[string]struct {
	Title   string   `json:"title"`
	Story   []string `json:"story"`
	Options []struct {
		Text string `json:"text"`
		Arc  string `json:"arc"`
	} `json:"options"`
}

type StoryHandler struct {
	story Story
}

func main() {
	var (
		flagStoryJSONFilename = flag.String("story", "gopher.json", "The path to the JSON of strong to be rendered")
		flagHttp              = flag.Bool("http", false, "Run as a web server")
	)
	flag.Parse()

	storyFile, err := os.Open(*flagStoryJSONFilename)

	if err != nil {
		fmt.Println(err)
		return
	}

	defer storyFile.Close()

	var story Story

	// deserialize json into struct
	if err := json.NewDecoder(storyFile).Decode(&story); err != nil {
		fmt.Println(err)
		return
	}

	if *flagHttp {
		http.ListenAndServe(":8080", storyMux(story))
	} else {
		runAsCmd(story)
	}
}

func (sh StoryHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	// get arc from query string
	arcName := r.URL.Query().Get("arc")
	if arcName == "" {
		arcName = "intro"
	}

	arc, ok := sh.story[arcName]
	if !ok {
		http.Error(w, "arc not found", http.StatusNotFound)
		return
	}

	// render html
	templ, err := template.ParseFiles("arc.html")

	if err != nil {
		http.Error(w, fmt.Sprintf("Error while rendering HTML: %v", err), http.StatusInternalServerError)
		return
	}

	// execute template and data binding between struct and template
	if err := templ.Execute(w, arc); err != nil {
		http.Error(w, fmt.Sprintf("Error while execute template: %v", err), http.StatusInternalServerError)
		return
	}
}

func storyMux(story Story) http.Handler {
	return StoryHandler{story}
}

func runAsCmd(story Story) {
	arc := story["intro"]
	templ := template.Must(template.ParseFiles("arc.txt"))

	for {
		// execute into console window
		templ.Execute(os.Stdout, arc)

		if len(arc.Options) == 0 {
			break
		}

		fmt.Printf("Choice: ")
		var choice int
		for {
			// scan number
			if _, err := fmt.Scanf("%d\n", &choice); err != nil {
				fmt.Println(err)
				return
			}

			if choice < 0 || choice >= len(arc.Options) {
				fmt.Println("Invalid choice %d, Allowed [0-%d]", choice, len(arc.Options))
				continue
			}
			break
		}

		arcName := arc.Options[choice].Arc
		arc = story[arcName] // = reassign and don't create new variable
	}
}
